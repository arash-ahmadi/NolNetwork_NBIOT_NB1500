/*
  Sketch for reading a Hall Latch Sensor

  If this does not perform, these are ideas to improve:
  - Add voltage divider to board for larger input range of sensor
  - add hysteresis in this script as additional noise filter
  - only trigger if there was no state change for n seconds.

*/

#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>

/* Uncomment the initialize the I2C address , uncomment only one, If you get a totally blank screen try the other*/
#define i2c_Address 0x3c //initialize with the I2C addr 0x3C Typically eBay OLED's
//#define i2c_Address 0x3d //initialize with the I2C addr 0x3D Typically Adafruit OLED's

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET -1   //   QT-PY / XIAO
Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2

const int analogInPin = 15;  // Connect to Signal pin of 4913B TLE4913 Hall Effect Sensor
const int threshold = 4094;  // this is for 5V Power Supply

// variables
long lastMsg = 0; // time counter for MQTT intervalls
int state = 1;
int counter = 0;
int sensorValue = 0;
int sensorValue_last = 0;
bool sensor_high = false;
bool sensor_rising = false;
bool notify_serial = false;


 // 'Logo (1)', 120x60px
const unsigned char myBitmap [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
	0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0c, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1e, 0x37, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3f, 0x03, 0xe0, 0x0f, 0xe0, 0x3f, 0x80, 0xcf, 0xc0, 0x7e, 0x01, 0xfc, 0x0c, 0xfc, 0x3f, 0x06, 
	0x1f, 0x81, 0xc0, 0x1f, 0xf0, 0x7f, 0xe1, 0xff, 0xe0, 0xff, 0x83, 0xff, 0x0f, 0xfe, 0x7f, 0x86, 
	0x0f, 0xc0, 0x80, 0x38, 0x38, 0xe0, 0x71, 0xf0, 0x71, 0xc1, 0xc7, 0x03, 0x8f, 0x07, 0xc1, 0xc6, 
	0x07, 0xe0, 0x00, 0x30, 0x19, 0xc0, 0x39, 0xe0, 0x31, 0x80, 0x8c, 0x01, 0x8e, 0x03, 0x80, 0xc6, 
	0x03, 0xf0, 0x00, 0x30, 0x01, 0x80, 0x19, 0xc0, 0x19, 0x80, 0x1c, 0x01, 0xce, 0x03, 0x80, 0xc6, 
	0x01, 0xf8, 0x00, 0x38, 0x03, 0x00, 0x19, 0xc0, 0x19, 0x80, 0x18, 0x00, 0xce, 0x03, 0x80, 0xe6, 
	0x00, 0xfc, 0x00, 0x1c, 0x03, 0x00, 0x1d, 0xc0, 0x19, 0xe0, 0x18, 0x00, 0xcc, 0x03, 0x80, 0xe6, 
	0x00, 0x7e, 0x00, 0x0f, 0xc3, 0xff, 0xfd, 0xc0, 0x18, 0x7e, 0x1f, 0xff, 0xec, 0x03, 0x00, 0xe6, 
	0x00, 0x3f, 0x00, 0x03, 0xf3, 0xff, 0xfd, 0xc0, 0x18, 0x1f, 0x9f, 0xff, 0xec, 0x03, 0x00, 0xe6, 
	0x00, 0x1f, 0x80, 0x00, 0x3b, 0x00, 0x01, 0xc0, 0x18, 0x03, 0xd8, 0x00, 0x0c, 0x03, 0x00, 0xe6, 
	0x18, 0x0f, 0xc0, 0x00, 0x1b, 0x00, 0x01, 0xc0, 0x18, 0x00, 0xd8, 0x00, 0x0c, 0x03, 0x00, 0xe6, 
	0x3c, 0x07, 0xc0, 0x00, 0x19, 0x80, 0x01, 0xc0, 0x18, 0x00, 0xdc, 0x00, 0x0c, 0x03, 0x00, 0xe6, 
	0x7e, 0xe3, 0xc0, 0x30, 0x19, 0xc0, 0x39, 0xc0, 0x1b, 0x80, 0xce, 0x01, 0xcc, 0x03, 0x00, 0xe6, 
	0x3f, 0xf1, 0x80, 0x38, 0x38, 0xe0, 0x71, 0xc0, 0x19, 0xc1, 0xc7, 0x03, 0x8c, 0x03, 0x00, 0xe6, 
	0x1f, 0xf8, 0x00, 0x1f, 0xf0, 0x7f, 0xe1, 0xc0, 0x18, 0xff, 0x83, 0xff, 0x0c, 0x03, 0x00, 0xe6, 
	0x0f, 0xfc, 0x00, 0x0f, 0xe0, 0x3f, 0xc0, 0xc0, 0x18, 0x7f, 0x01, 0xfc, 0x0c, 0x03, 0x00, 0xc6, 
	0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};




/* MQTT callback
   This code sections reacts to incoming MQTT messages.
*/


void setup() {

  Serial.begin(9600);
  delay(250); // wait for the OLED to power up
  display.begin(i2c_Address, true); // Address 0x3C default
  // Clear the buffer.
  display.clearDisplay();


  display.drawBitmap(0, 0,  myBitmap,128,64,1);
  display.display();
  delay(5000);
  // text display tests
  display.setTextSize(2);
  display.setTextColor(SH110X_WHITE);
  display.setCursor(0, 0);
  // display.println("aaConnected");
 
  // display.display();
  // delay(20000);
  // display.clearDisplay();

}

void loop() {



  
  notify_serial = false;

  // read analog value:
  sensorValue = analogRead(analogInPin);
  //Serial.print(sensorValue);
  //Serial.println("\n");
   display.setCursor(0, 0);
   Serial.println(sensorValue);
   display.print(sensorValue);
   display.display();
   display.clearDisplay();
   delay(25);
  if (sensorValue > threshold)
    sensor_high = true;
  else
    sensor_high = false;

  if (sensorValue > sensorValue_last)
    sensor_rising = true;
  else
    sensor_rising = false;


  // register state 1 (no magnetic counter)
  if ((sensorValue > threshold) && (state == 0))
  { state = 1;
    counter++;
    notify_serial = true;
  }

  // register state 0 (magnetic counter detected)
  else if ((sensorValue < threshold) && (state == 1))
  { state = 0;
    notify_serial = true;
  }

  if (notify_serial)
  {

    // print the results to the Serial Monitor:
    Serial.print(sensor_high);
    Serial.print("\t");
    Serial.print(sensor_rising);
    Serial.print("\t");
    Serial.print(state);
    Serial.print("\t");
    Serial.print(counter);
    Serial.print("\t");
    Serial.println(sensorValue);
  }
}

  // check of MQTT message must be send due set message intervall